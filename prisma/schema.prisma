generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model clubadvisors {
  id                Int             @id @default(autoincrement())
  facultyadvisor_id Int
  club_id           Int
  clubs             clubs           @relation(fields: [club_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_clubadvisors_club")
  facultyadvisors   facultyadvisors @relation(fields: [facultyadvisor_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_clubadvisors_facultyadvisor")
}

model clubmembers {
  id       Int      @id @default(autoincrement())
  user_id  Int
  club_id  Int
  role     String?
  is_admin Boolean?
  clubs    clubs    @relation(fields: [club_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_clubmembers_club")
  users    users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_clubmembers_user")
}

model clubs {
  id              Int               @id @default(autoincrement())
  name            String?
  about           String?
  clubadvisors    clubadvisors[]
  clubmembers     clubmembers[]
  eventconvenors  eventconvenors[]
  organizingclubs organizingclubs[]
}

model eventattendance {
  id         Int      @id @default(autoincrement())
  user_id    Int
  event_id   Int
  is_present Boolean?
  events     events   @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_eventattendance_event")
  users      users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_eventattendance_user")
}

model eventconvenors {
  id       Int    @id @default(autoincrement())
  event_id Int
  user_id  Int
  club_id  Int
  clubs    clubs  @relation(fields: [club_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_eventconvenors_club")
  events   events @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_eventconvenors_event")
  users    users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_eventconvenors_user")
}

model eventregistration {
  id       Int    @id @default(autoincrement())
  event_id Int
  team_id  Int
  events   events @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_eventregistration_event")
  teams    teams  @relation(fields: [team_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_eventregistration_team")
}

model events {
  id                Int                 @id @default(autoincrement())
  name              String?
  about             String?
  date              DateTime?           @db.Date
  event_type        String?
  event_category    String?
  min_no_member     Int?
  max_no_member     Int?
  eventattendance   eventattendance[]
  eventconvenors    eventconvenors[]
  eventregistration eventregistration[]
  eventwinners      eventwinners[]
  feedback          feedback[]
  organizingclubs   organizingclubs[]
  teams             teams[]
}

model eventwinners {
  id       Int    @id @default(autoincrement())
  team_id  Int
  event_id Int
  position Int?
  events   events @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_eventwinners_event")
  teams    teams  @relation(fields: [team_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_eventwinners_team")
}

model facultyadvisors {
  id           Int            @id @default(autoincrement())
  name         String?
  department   String?
  designation  String?
  clubadvisors clubadvisors[]
}

model feedback {
  id         Int       @id @default(autoincrement())
  user_id    Int
  event_id   Int
  feedback   String?
  rating     Int?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  events     events    @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_feedback_event")
  users      users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_feedback_user")
}

model invitation {
  id                                   Int   @id @default(autoincrement())
  from_team_id                         Int
  to_team_id                           Int
  teams_invitation_from_team_idToteams teams @relation("invitation_from_team_idToteams", fields: [from_team_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_invitation_from_team")
  teams_invitation_to_team_idToteams   teams @relation("invitation_to_team_idToteams", fields: [to_team_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_invitation_to_team")
}

model organizingclubs {
  id       Int    @id @default(autoincrement())
  event_id Int
  club_id  Int
  clubs    clubs  @relation(fields: [club_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_organizingclubs_club")
  events   events @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_organizingclubs_event")
}

model teammembers {
  id      Int   @id @default(autoincrement())
  user_id Int
  team_id Int
  teams   teams @relation(fields: [team_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_teammembers_team")
  users   users @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_teammembers_user")
}

model teams {
  id                                        Int                 @id @default(autoincrement())
  name                                      String?
  event_id                                  Int?
  teamto_event                              events?             @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_teams_event")
  eventregistration                         eventregistration[]
  eventwinners                              eventwinners[]
  invitation_invitation_from_team_idToteams invitation[]        @relation("invitation_from_team_idToteams")
  invitation_invitation_to_team_idToteams   invitation[]        @relation("invitation_to_team_idToteams")
  teammembers                               teammembers[]
}

model users {
  id               Int               @id @default(autoincrement())
  name             String?
  rollno           String?           @unique @db.VarChar(50)
  password         String?
  department       String?
  email            String?           @unique @db.VarChar(100)
  phoneno          BigInt?           @unique
  yearofstudy      Int?
  created_at       DateTime?         @default(now()) @db.Timestamp(6)
  clubmembers      clubmembers[]
  eventattendance  eventattendance[]
  eventconvenors   eventconvenors[]
  feedback         feedback[]
  teammembers      teammembers[]
  usersecuritycode usersecuritycode?
}

model usersecuritycode {
  id         Int       @id @default(autoincrement())
  user_id    Int       @unique
  code       String?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_usersecuritycode_user")
}
